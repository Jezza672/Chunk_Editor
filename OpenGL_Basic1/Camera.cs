using OpenTK;
using OpenTK.Graphics.OpenGL;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Chunk_Editor
{
    /// <summary>
    /// Represents an orthographic camera in the scene.
    /// </summary>
    class Camera
    {
        /// <summary>
        /// Position of centre of the view, in units.
        /// </summary>
        public Vector2 Position;

        /// <summary>
        /// Size of view in pixels.
        /// </summary>
        public Vector2 Size;

        /// <summary>
        /// Rotation, in radians, +ive is clockwise.
        /// </summary>
        public double Rotation;

        /// <summary>
        /// Multiplication factor for zoom.
        /// </summary>
        public float Zoom;

        /// <summary>
        /// Create a new Camera
        /// </summary>
        /// <param name="position">Position of centre.</param>
        /// <param name="size">Size of view in pixels.</param>
        /// <param name="rotation">Rotation of view in radians, +ve is clockwise. Defaults to 0.</param>
        /// <param name="zoom">Zoom, multiplication factor. Defaults to 1.</param>
        public Camera(Vector2 position, Vector2 size, double rotation = 0.0, float zoom = 1)
        {
            Position = position;
            Size = size;
            Rotation = rotation;
            Zoom = zoom;
        }

        /// <summary>
        /// Update the camera.
        /// </summary>
        public void Update()
        {

        }

        /// <summary>
        /// Get the View Matrix generated by the camera
        /// </summary>
        /// <returns>Matrix4 projection matrix</returns>
        public Matrix4 GetViewMatrix()
        {
            Matrix4 view = Matrix4.CreateOrthographic(Size.X / Zoom, Size.Y / Zoom, -400, 400);
            view = Matrix4.Mult(view, Matrix4.CreateTranslation(-Position.X, -Position.Y, 0));
            view = Matrix4.Mult(view, Matrix4.CreateRotationZ((float)-Rotation));

            return view;
        }
    }
}
